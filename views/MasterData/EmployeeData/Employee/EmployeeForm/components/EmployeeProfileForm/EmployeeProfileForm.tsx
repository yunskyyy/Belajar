import { Controller } from 'react-hook-form';

import Autocomplete from '@/components/base/Autocomplete';
import Checkbox from '@/components/base/Checkbox';
import DatePicker from '@/components/base/DatePicker';
import Paper from '@/components/base/Paper';
import Radio from '@/components/base/Radio';
import Select from '@/components/base/Select';
import Textarea from '@/components/base/Textarea';
import TextField from '@/components/base/Textfield';
import { numbersOnly } from '@/helpers';
import type { SelectItem } from '@/types/inputs';
import { formatDateApi } from '@/utils';

import {
  GENDER_OPTION,
  MARITAL_STATUS_OPTION,
  RELIGION_OPTION,
} from './EmployeeProfileForm.constants';
import useEmployeeProfileForm from './EmployeeProfileForm.hooks';

const EmployeeProfileForm = (props: { isEdit: boolean }) => {
  const { isEdit = false } = props;
  const {
    control,
    errors,
    emailAutocompleteValue,
    getValues,
    register,
    setValue,
    showResidentialAddress,
    userOption,
    handleChangeShowAddress,
    handleEmailInputChange,
    handleEmailValueChange,
  } = useEmployeeProfileForm();
  return (
    <Paper title="Employee Profile" className="p-4">
      <div className="grid grid-cols-2 gap-5">
        <TextField
          {...register('employeeIdNumber')}
          className="col-span-2 w-1/2"
          label="Employee ID"
          disabled
          message="Autogenerated by system"
          block
        />
        {!isEdit ? (
          <Controller
            control={control}
            name="emailAddress"
            render={({
              field: {
                ref,
                onChange,
                value,
              },
              fieldState: { error },
            }) => (
              <Autocomplete
                ref={ref}
                className="col-span-2 w-1/2"
                label="Email"
                placeholder="Enter email"
                options={userOption}
                inputValue={emailAutocompleteValue}
                isEqualToOption={(option) => option.value === getValues('userId')}
                onInputChange={
                  (_e, inputValue) => handleEmailInputChange(inputValue)
                }
                onChange={(_e, autocompleteValue) => {
                  const {
                    value: selectedValue = '',
                    label = '',
                  } = autocompleteValue as SelectItem || {};
                  onChange(label.split(' ')[0].trim());
                  handleEmailValueChange(label, String(selectedValue));
                }}
                value={value}
                error={!!error}
                message={error && error.message}
                block
                required
              />
            )}
          />
        ) : (
          <TextField
            {...register('emailAddress')}
            className="col-span-2 w-1/2"
            label="Email"
            error={!!errors.emailAddress}
            message={errors.emailAddress && errors.emailAddress.message}
            disabled
            block
            required
          />
        )}
        <TextField
          {...register('firstName')}
          label="First Name"
          error={!!errors.firstName}
          message={errors.firstName && errors.firstName.message}
          placeholder="Enter first name"
          block
          required
        />
        <TextField
          {...register('lastName')}
          label="Last Name"
          error={!!errors.lastName}
          message={errors.lastName && errors.lastName.message}
          placeholder="Enter last name"
          block
        />
        <Controller
          control={control}
          name="citizenIdCardNumber"
          render={({
            field: {
              ref,
              onChange,
              value,
              name,
            },
            fieldState: { error },
          }) => (
            <TextField
              ref={ref}
              name={name}
              className="col-span-2"
              label="Citizen ID (KTP)"
              placeholder="Enter citizen ID (KTP 16 digits)"
              value={value}
              labelLayout="vertical"
              onChange={(event) => onChange(numbersOnly(event.target.value))}
              maxLength={16}
              message={error && error.message}
              error={!!error}
              required
              block
            />
          )}
        />
        <div className="col-span-2 w-full">
          <Controller
            control={control}
            name="citizenAddress"
            render={({
              field: {
                ref,
                onChange,
                value,
                name,
              },
              fieldState: { error },
            }) => (
              <Textarea
                ref={ref}
                name={name}
                label="Citizen ID Address (Alamat KTP)"
                error={!!error}
                message={error && error.message}
                placeholder="Enter Citizen ID Address (Alamat KTP)"
                onChange={(e) => {
                  onChange(e.target.value);
                  if (!showResidentialAddress) {
                    setValue('residentialAddress', e.target.value);
                  }
                }}
                value={value}
                block
                required
              />
            )}
          />
          <Checkbox
            onChange={(e) => handleChangeShowAddress(e.target.checked)}
            label="Check if your home address is different from the address on your KTP"
          />
        </div>
        {showResidentialAddress && (
          <Textarea
            {...register('residentialAddress')}
            className="col-span-2"
            label="Residential Address (Alamat Tinggal)"
            error={!!errors.residentialAddress}
            message={errors.residentialAddress && errors.residentialAddress.message}
            placeholder="Enter Residential Address (Alamat Tinggal)"
            block
            required
          />
        )}
        <TextField
          {...register('placeOfBirth')}
          label="Place of Birth"
          error={!!errors.placeOfBirth}
          message={errors.placeOfBirth && errors.placeOfBirth.message}
          placeholder="Enter place of birth"
          block
          required
        />
        <Controller
          control={control}
          name="dateOfBirth"
          render={({
            field: {
              ref,
              onChange,
              value,
              name,
            },
            fieldState: { error },
          }) => (
            <DatePicker
              ref={ref}
              name={name}
              label="Date of Birth"
              placeholder="Select date of birth"
              error={!!error}
              message={error && error.message}
              onChange={
                (inputValue) => onChange(inputValue ? formatDateApi(inputValue) : '')
              }
              value={value ? new Date(value) : null}
              block
              required
            />
          )}
        />

        <Controller
          control={control}
          name="mobilePhone"
          render={({
            field: {
              ref,
              onChange,
              value,
              name,
            },
            fieldState: { error },
          }) => (
            <TextField
              ref={ref}
              name={name}
              label="Mobile Phone"
              placeholder="Enter Mobile Phone"
              value={value}
              labelLayout="vertical"
              onChange={(event) => onChange(numbersOnly(event.target.value))}
              maxLength={13}
              message={error && error.message}
              error={!!error}
              required
              block
            />
          )}
        />

        <Controller
          control={control}
          name="gender"
          render={({
            field: {
              ref,
              onChange,
              value,
              name,
            },
            fieldState: { error },
          }) => (
            <Radio
              name={name}
              options={GENDER_OPTION}
              label="Gender"
              error={!!error}
              message={error && error.message}
              classes={{ container: 'flex items-center h-16' }}
              required
              ref={ref}
              onChange={onChange}
              checkedValue={value}
            />
          )}
        />

        <Controller
          control={control}
          name="maritalStatus"
          render={(
            {
              field: {
                ref,
                onChange,
                value,
                name,
              },
              fieldState: { error },
            },
          ) => (
            <Select
              ref={ref}
              name={name}
              label="Marital Status"
              placeholder="Select Marital Status"
              options={MARITAL_STATUS_OPTION}
              value={value}
              labelLayout="vertical"
              onChange={onChange}
              message={error && error.message}
              error={!!error}
              required
              block
            />
          )}
        />

        <Controller
          control={control}
          name="religion"
          render={({
            field: {
              ref,
              onChange,
              value,
              name,
            },
            fieldState: { error },
          }) => (
            <Select
              ref={ref}
              name={name}
              label="Religion"
              placeholder="Select Religion"
              options={RELIGION_OPTION}
              value={value}
              labelLayout="vertical"
              onChange={onChange}
              error={!!error}
              message={error && error.message}
              required
              block
            />
          )}
        />
      </div>
    </Paper>
  );
};

export default EmployeeProfileForm;
